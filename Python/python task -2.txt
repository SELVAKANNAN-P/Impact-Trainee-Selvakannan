class Account:
    def __init__(self, account_number, initial_balance=0.0):
        self.account_number = account_number
        self.balance = initial_balance
        self.transaction_history = []  

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            self.transaction_history.append(f"Deposited: {amount:.2f}")
            print(f"Deposited {amount:.2f}. New Balance: {self.balance:.2f}")
        else:
            print("Invalid deposit amount.")

    def withdraw(self, amount):
        if amount > 0 and self.balance >= amount:
            self.balance -= amount
            self.transaction_history.append(f"Withdrew: {amount:.2f}")
            print(f"Withdrew {amount:.2f}. New Balance: {self.balance:.2f}")
        else:
            print("Insufficient balance or invalid amount.")

    def get_balance(self):
        print(f"Account {self.account_number} Balance: {self.balance:.2f}")

    def view_account_details(self):
        print(f"\nAccount Number: {self.account_number}")
        print(f"Balance: {self.balance:.2f}")
        print("Transaction History:")
        if not self.transaction_history:
            print("No transactions yet.")
        else:
            for log in self.transaction_history:
                print(f"- {log}")


class SavingsAccount(Account):
   
    def __init__(self, account_number, initial_balance=0.0, minimum_balance=500.0):
        super().__init__(account_number, initial_balance)
        self.minimum_balance = minimum_balance

    def withdraw(self, amount):
        if self.balance - amount >= self.minimum_balance:
            super().withdraw(amount)
        else:
            print(f"Cannot withdraw. Minimum balance of {self.minimum_balance} must be maintained.")


class CurrentAccount(Account):
    pass


def transfer_money(from_account, to_account, amount):
    if from_account.balance >= amount:
        from_account.withdraw(amount)
        to_account.deposit(amount)
        print(f"Transferred {amount:.2f} from {from_account.account_number} to {to_account.account_number}.")
    else:
        print("Transfer failed due to insufficient funds.")


def main():
    print("Welcome to the Enhanced Bank Account Management System!")
    print("1. Savings Account\n2. Current Account")
    account_type = input("Choose account type (1 or 2): ")

    account_number = input("Enter Account Number: ")
    initial_balance = float(input("Enter Initial Balance: "))

    if account_type == "1":
        account = SavingsAccount(account_number, initial_balance)
    elif account_type == "2":
        account = CurrentAccount(account_number, initial_balance)
    else:
        print("Invalid choice. Exiting...")
        return

    secondary_account = SavingsAccount("99999", 2000.0)

    while True:
        print("\nOptions:")
        print("1. Deposit\n2. Withdraw\n3. Check Balance\n4. View Account Details")
        print("5. Transfer Money\n6. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            amount = float(input("Enter amount to deposit: "))
            account.deposit(amount)
        elif choice == "2":
            amount = float(input("Enter amount to withdraw: "))
            account.withdraw(amount)
        elif choice == "3":
            account.get_balance()
        elif choice == "4":
            account.view_account_details()
        elif choice == "5":
            print(f"Transferring money to Account {secondary_account.account_number}")
            amount = float(input("Enter amount to transfer: "))
            transfer_money(account, secondary_account, amount)
        elif choice == "6":
            print("Thank you for using our system. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")



main()


            